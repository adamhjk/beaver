#!/usr/bin/env ruby
#
# Beaver fetches logs.
#
# Author:: Adam Jacob (<adam@hjksolutions.com>)
# Copyright:: Copyright (c) 2007 HJK Solutions, LLC
# License:: GNU General Public License version 2.1
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2.1
# as published by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

begin
  require 'rubygems'
  require 'beaver'  
rescue LoadError
  begin
    require 'beaver'
  rescue LoadError
    require File.dirname(__FILE__) + '/../lib/beaver'
  end
end

require 'yaml'
require 'optparse'

config_file = nil
config_file = "/etc/beaver/beaver.yml" if FileTest.file?("/etc/beaver/beaver.yml")
job_file    = nil
dry_run     = nil
debug       = false
variable_set = Hash.new

opts = OptionParser.new do |opts|
  opts.banner = "Usage: #{$0} (options) -j JOBFILE"
  opts.on("-j JOBFILE", "--job JOBFILE", "A beaver job file.") do |j|
    job_file = File.expand_path(j)
  end
  opts.on("-c CONFIG", "--config CONFIGFILE", "A beaver.yml file.") do |c|
    config_file = File.expand_path(c)
  end
  opts.on("-n", "--no-action", "Don't do anything, just print what you would do.") do |n|
    dry_run = true
    debug   = true
  end
  opts.on("-s ONE,TWO", "--set ONE,TWO", "A list of variables to set") do |set|
    set.each do |s|
      key, value = s.split('=')
      if value
        variable_set[key.to_sym] = value
      else
        variable_set[key.to_sym] = true
      end
    end
  end
  opts.on("-d", "Show debug output.") do |d|
    debug = true
  end
  opts.on_tail("-h", "--help", "Show this message.") do
    puts opts
    exit
  end
end
opts.parse!(ARGV)

unless job_file
  puts "You must specify a job file!"
  puts opts
  exit
end

raise "Job file #{job_file} does not exist!" unless FileTest.file?(job_file)

config = Beaver::Config.new(config_file)
config.log_level = "DEBUG" if debug
config.make_missing_dirs
config.setup_database
unless FileTest.file?(File.expand_path(config.db["database"]))
  config.migrate_database() 
end

job = Beaver::Job.new(config)
variable_set.each do |key, value|
  job.set({ key => value })
end
begin
  job.load(job_file)
rescue
  job.cleanup
  raise
end
job.cleanup
exit 0